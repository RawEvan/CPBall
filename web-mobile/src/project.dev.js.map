{"version":3,"sources":["assets/Script/ball.js","assets/Script/block.js","assets/Script/food.js","assets/Script/game.js","assets/Script/global.js","assets/Script/hall.js","assets/Script/login.js"],"names":["cc","Class","extends","Component","properties","lost","onBeginContact","contact","selfCollider","otherCollider","node","name","this","ctl","onLostFood","console","log","speed","direction_x","direction_y","user","touchLoc","touch_active","onLoad","on","Node","EventType","TOUCH_MOVE","event","getTouches","getLocation","update","dt","position","parent","convertToNodeSpaceAR","score","onEatFood","destroy","myball","require","Block","myfood","ball","default","type","bg","block1","block2","touch_block","partner_block","user_info1","Label","user_info2","scoreLable","bloodLable","stateLable","blood","food","Prefab","foods","ws","role","state","room","host","foodInterval","getRandomLoc","p","randomMinus1To1","x","y","addRandomFood","foodLoc","addFood","instantiate","push","string","toString","comp","sendPlay","initWebSocket","initDirector","onmessage","evt","data","JSON","parse","method","recvInit","recvPlay","recvFood","initInfo","director","getCollisionManager","enabled","getPhysicsManager","WebSocket","onDisable","sendInit","send","stringify","Global","user1","user2","schedule","touch_loc","sendFood","loadLogin","loadScene","readyState","window","invite_layout","name_input","EditBox","succ","search_user","partner","game","addPersistRootNode","login","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","resp","eval","responseText"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        lost: false,\r\n    },\r\n\r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        if (otherCollider.node.name == 'groud') {\r\n            this.lost = true;\r\n            this.node.ctl.onLostFood(this);\r\n            console.log('lost');\r\n        }\r\n    },\r\n});","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        speed: 400,\r\n        direction_x: 0,\r\n        direction_y: 0,\r\n        user: null,\r\n        touchLoc: null,\r\n        touch_active: false,\r\n    },\r\n\r\n    onLoad: function () {\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n            if (this.touch_active) {\r\n                this.touchLoc = event.getTouches()[0].getLocation();\r\n            } \r\n            // else {\r\n            //     event.stopPropagation();\r\n            // }\r\n        }, this);\r\n    },\r\n\r\n    update: function (dt) {\r\n        if (this.touchLoc) {\r\n            this.node.position = this.node.parent.convertToNodeSpaceAR(this.touchLoc);\r\n        }\r\n    },\r\n});","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        score: 1,\r\n        lost: false,\r\n    },\r\n\r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        if (otherCollider.node.name == 'groud') {\r\n            this.lost = true;\r\n            this.node.ctl.onLostFood(this);\r\n            console.log('lost');\r\n        }\r\n        if (otherCollider.node.name == 'ball') {\r\n            this.node.ctl.onEatFood(this);\r\n            console.log('eat');    \r\n        }\r\n        this.node.destroy();\r\n    },\r\n});\r\n","const myball = require(\"ball\");\r\nconst Block = require('block');\r\nconst myfood = require(\"food\");\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        ball: {\r\n            default: null,\r\n            type: myball\r\n        },\r\n        bg: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        block1: {\r\n            default: null,\r\n            type: Block\r\n        },\r\n        block2: {\r\n            default: null,\r\n            type: Block\r\n        },\r\n        touch_block: {\r\n            default: null,\r\n            type: Block\r\n        },\r\n        partner_block: {\r\n            default: null,\r\n            type: Block\r\n        },\r\n        user_info1: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        user_info2: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        scoreLable: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        bloodLable: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        stateLable: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        blood: 5,\r\n        score: 0,\r\n        food: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        foods: [],\r\n        ws: null,\r\n        role: null,\r\n        // FIXME: prepare -> wait -> init -> play -> over -> wait\r\n        state: 'prepare',\r\n        room: null,\r\n        // fixme: use conf\r\n        host: '118.25.8.36:8888',\r\n        // host: '192.168.73.129:8888',\r\n        foodInterval: 1,\r\n    },\r\n\r\n    getRandomLoc: function() {\r\n        return cc.p(0.5 * cc.randomMinus1To1() * this.node.position.x, 0.5 * this.bg.parent.y);\r\n    },\r\n\r\n    addRandomFood : function () {\r\n        var foodLoc = this.getRandomLoc()\r\n        this.addFood(foodLoc);\r\n        // this.sendFood(foodLoc);\r\n    },\r\n\r\n    addFood: function (foodLoc) {\r\n        var food = cc.instantiate(this.food);\r\n        food.parent = this.bg;\r\n        //this.canvas.node.addChild(monster);\r\n        food.position = foodLoc;\r\n        food.ctl = this;\r\n        this.foods.push(food);\r\n    },\r\n\r\n    onLostFood: function (food) {\r\n        this.blood -= food.score;\r\n        this.bloodLable.string = 'Blood: ' + this.blood.toString();\r\n    },\r\n\r\n    onEatFood: function (food) {\r\n        this.score += food.score;\r\n        this.scoreLable.string = 'Score: ' + this.score.toString();\r\n    },\r\n\r\n    onLoad: function () {\r\n        var comp = this;\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.sendPlay, this);\r\n        this.initWebSocket();\r\n        this.initDirector();\r\n        this.ws.onmessage = function (evt) {\r\n            var data = JSON.parse(evt.data)\r\n                console.log('receive: ');\r\n                console.log(data);\r\n                if (data.method == 'init') {\r\n                    comp.recvInit(data);\r\n                } else if (data.method == 'play') {\r\n                    comp.recvPlay(data);\r\n                } else if (data.method == 'stop') {\r\n                    comp.stateLable.string = 'Stopped';\r\n                } else if (data.method == 'food') {\r\n                    comp.recvFood(data);\r\n                }\r\n            }\r\n        this.initInfo();\r\n    },\r\n\r\n    initInfo: function () {\r\n        this.bloodLable.string = 'Blood: ' + this.blood.toString();\r\n        this.scoreLable.string = 'Score: ' + this.score.toString();\r\n        this.stateLable.string = 'State: ' + this.state.toString();\r\n    },\r\n\r\n    initDirector: function () {\r\n        cc.director.getCollisionManager().enabled = true;\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        // cc.director.getCollisionManager().enabledDebugDraw = true;\r\n        // cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |\r\n        //     cc.PhysicsManager.DrawBits.e_pairBit |\r\n        //     cc.PhysicsManager.DrawBits.e_centerOfMassBit |\r\n        //     cc.PhysicsManager.DrawBits.e_jointBit |\r\n        //     cc.PhysicsManager.DrawBits.e_shapeBit\r\n    ;\r\n    },\r\n\r\n    initWebSocket: function () {\r\n        this.ws = new WebSocket(\"ws://\" + this.host + \"/game\");\r\n    },\r\n\r\n    onDisable: function () {\r\n        cc.director.getCollisionManager().enabled = false;\r\n        cc.director.getPhysicsManager().enabled = false;\r\n    },\r\n\r\n    sendInit: function () {\r\n        console.log('send init');\r\n        this.ws.send(JSON.stringify({\r\n            'method': 'init',\r\n            'user': Global.user,\r\n        }));\r\n        this.state = 'wait';\r\n        this.stateLable.string = 'Waiting...'\r\n    },\r\n\r\n    recvInit: function (data) {\r\n        this.block1.user = data.user1;\r\n        this.block2.user = data.user2;\r\n        this.room = data.user1;\r\n        if (data.user1 == Global.user) {\r\n            this.touch_block = this.block1;\r\n            this.partner_block = this.block2;\r\n        } else {\r\n            this.touch_block = this.block2;\r\n            this.partner_block = this.block1;\r\n        }\r\n        this.touch_block.touch_active = true;\r\n        if (data.user1 && data.user2) {\r\n            this.state = 'play';\r\n            if (Global.user == data.user1) {\r\n                this.schedule(this.addRandomFood, this.foodInterval);\r\n            };\r\n            this.user_info1.string = data.user1;\r\n            this.user_info2.string = data.user2;\r\n            this.stateLable.string = 'Playing';\r\n        }\r\n    },\r\n\r\n    sendPlay: function () {\r\n        console.log('send');\r\n        console.log(Global.user);\r\n        this.ws.send(JSON.stringify({\r\n            'method': 'play',\r\n            'user': Global.user,\r\n            'room': this.room,\r\n            'touch_loc': this.touch_block.touchLoc,\r\n        }));\r\n    },\r\n\r\n    recvPlay: function (data) {\r\n        if (data.user != Global.user) {\r\n            this.partner_block.touchLoc = data.touch_loc;\r\n        }\r\n    },\r\n\r\n    sendFood: function (foodLoc) {\r\n        this.ws.send(JSON.stringify({\r\n            'method': 'food',\r\n            'user': Global.user,\r\n            'room': this.room,\r\n            'foodLoc': foodLoc,\r\n        }));\r\n    },\r\n\r\n    recvFood: function (foodLoc) {\r\n        this.addFood(data.foodLoc);\r\n    },\r\n\r\n    loadLogin: function () {\r\n        cc.director.loadScene(\"login\");\r\n    },\r\n\r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        console.log(otherCollider);\r\n    },\r\n\r\n    update: function (dt) {\r\n        if (this.ball.lost == true || this.blood <= 0) {\r\n            this.onDisable();\r\n            this.stateLable.string = 'Game Over';\r\n        };\r\n\r\n        if (this.state == 'prepare' && this.ws.readyState == 1) {\r\n            this.sendInit();\r\n        };\r\n\r\n        if (this.state == 'play' && this.touch_block.touchLoc) {\r\n            this.sendPlay();\r\n        };\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\nwindow.Global = {\r\n    user: \"\",\r\n};\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        invite_layout: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        name_input: {\r\n            default: null,\r\n            type: cc.EditBox\r\n        }\r\n    },\r\n\r\n    ws: null,\r\n\r\n    onLoad () {\r\n        this.ws = new WebSocket(\"ws://192.168.73.129:8888/hall\");\r\n        this.ws.onmessage = function (evt) {\r\n            data = JSON.parse(evt.data)\r\n            console.log(data);\r\n            if (data.method == 'init' && data.succ == true) {\r\n                cc.director.loadScene(\"game\");\r\n            };\r\n        };\r\n    },\r\n\r\n    search_user () {\r\n        this.ws.send(JSON.stringify({'method': 'invite',\r\n            'user': Global.user,\r\n            'partner': this.name_input.string,\r\n        }));\r\n    },\r\n})","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        name_input: {\r\n            default: null,\r\n            type: cc.EditBox\r\n        },\r\n        // fixme: use conf\r\n        host: '118.25.8.36:8888',\r\n        // host: '192.168.73.129:8888',\r\n    },\r\n\r\n    onLoad: function () {\r\n        cc.game.addPersistRootNode(this.node);\r\n    },\r\n\r\n    login: function () {\r\n        var user = this.name_input.string\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"http://\" + this.host + \"/login/\" + user);\r\n        xhr.setRequestHeader('Access-Control-Allow-Origin', '*');\r\n        xhr.onreadystatechange = function () {\r\n                var resp = eval(\"(\"+xhr.responseText+\")\");\r\n                if (resp.succ == true) {\r\n                    Global.user = user;\r\n                    cc.director.loadScene(\"game\");\r\n                };\r\n        };\r\n        xhr.send();\r\n    },\r\n});\r\n"],"sourceRoot":"/source/","file":"project.dev.js"}